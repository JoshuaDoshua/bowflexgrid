@import "_utility";

/// @content Create the grid system rules
/// @group grid-system
/// @access public
/// @param {array} $bps - Array of breakpoints with key: values
/// @param {int} $columns [12] - number of columns in your grid
/// @param {int} $gutter [20px] - space between each column
/// @param {str} $main [lrg] - the main content wrapper breakpoint $bps key
/// @param {str} $outer [xlg] - the outer content wrapper breakpoint $bps key
/// @require $columns
@mixin bowflex-grid($bps, $cols: 12, $gutter: 20px, $mobilePadding: 5%, $main: lrg, $outer: xlg) {

	$main: bp($main);
	$outer: bp($outer);

	$baseWidth: percentage((($main - (($cols - 1) * $gutter)) / $cols) / $main);
	$gutter: percentage($gutter / $main);

	[bow],
	[flex],
	[col] { box-sizing: border-box; }


	[bow],
	[flex] {
	  width: 100%;
		margin-left: auto;
		margin-right: auto;
	}

	[bow] {
		display: block;
	  max-width: $outer;
	}

	[flex] {
		display: flex;
		max-width: $main;

		flex: 0 1 auto;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: space-between;
		align-items: flex-start;

		// TODO ADD FLUSH RULES
		padding-left: #{$mobilePadding};
		padding-right: #{$mobilePadding};
		@include respond($main) {
			padding-left: 0;
			padding-right: 0;
		}

		&[flex~="container"] { display: block; }
	}

	[bow~="fluid"],
	[flex~="fluid"] { max-width: 100%; }

	// null - default, mobile first
	@include flex-grid-size('', $cols, $baseWidth, $gutter);

	// create a set of rules for each breakpoint
	// include a dash to prefix the flex"-key" & col-"key"
	@each $key, $size in $bps {
		@include respond($key) {
			@include flex-grid-size("-#{$key}", $cols, $baseWidth, $gutter);
		}
	}
}

/// Create a set of row rules for a given size
/// @group grid-system
/// @access private
@mixin flex-grid-size($size, $cols, $baseWidth, $gutter) {

	// just a container, without flex rules
	[flex#{$size}~="container"]		{ display: block; }

	// flex-wrap
	[flex#{$size}~="wrap"]				{ flex-wrap: wrap; }
	[flex#{$size}~="nowrap"]			{ flex-wrap: nowrap; }
	[flex#{$size}~="wraprev"] 		{ flex-wrap: wrap-reverse; }

	// justify-content
	[flex#{$size}~="between"] 		{ justify-content: space-between; }
	[flex#{$size}~="around"] 			{ justify-content: space-around; }
	[flex#{$size}~="left"]				{ justify-content: flex-start; }
	[flex#{$size}~="center"] 			{ justify-content: center; }
	[flex#{$size}~="right"] 			{ justify-content: flex-end; }

	// flex-direction
	[flex#{$size}~="row"]					{ flex-direction: row; }
	[flex#{$size}~="rowrev"]			{ flex-direction: row-reverse; }
	[flex#{$size}~="vert"]				{ flex-direction: column; }
	[flex#{$size}~="vertrev"]			{ flex-direction: column-reverse; }

	// align-items
	[flex#{$size}~="top"] 				{ align-items: flex-start; }
	[flex#{$size}~="middle"] 			{ align-items: center; }
	[flex#{$size}~="bottom"] 			{ align-items: flex-end; }
	[flex#{$size}~="stretch"] 		{ align-items: stretch; }
	[flex#{$size}~="baseline"] 		{ align-items: baseline; }
	[flex#{$size}~="vert"],
	[flex#{$size}~="vertrev"] {
		&[flex#{$size}~="left"]			{ align-items: flex-start; }
		&[flex#{$size}~="center"]		{ align-items: center; }
		&[flex#{$size}~="right"]		{ align-items: flex-end; }
	}

	// gutter stuff
	[flex#{$size}~="left"] [col],
	[flex#{$size}~="center"] [col]{
		margin-left: $gutter;
		&:first-child { margin-left: 0; }
	}
	[flex#{$size}~="right"] [col] {
		margin-left: 0;
		margin-right: $gutter;
		&:last-child { margin-right: 0; }
	}
	[flex#{$size}~="vert"][flex#{$size}~="left"] [col],
	[flex#{$size}~="vertrev"][flex#{$size}~="left"] [col] {
		margin-left: 0;
	}
	[flex#{$size}~="vert"][flex#{$size}~="center"] [col],
	[flex#{$size}~="vertrev"][flex#{$size}~="center"] [col] {
		margin-left: 0;
		margin-right: 0;
	}
	[flex#{$size}~="vert"][flex#{$size}~="right"] [col],
	[flex#{$size}~="vertrev"][flex#{$size}~="right"] [col] {
		margin-right: 0;
	}
	[flex#{$size}~="flush"] [col] {
		margin-left: 0;
		margin-right: 0;
	}

	// TODO: Does not include the "align-content" rules

	// columns
	// alignments
	[col#{$size}~="top"]					{ align-self: flex-start; }
	[col#{$size}~="middle"] 			{ align-self: center; }
	[col#{$size}~="bottom"] 			{ align-self: flex-end; }
	[col#{$size}~="stretch"] 			{ align-self: stretch; }
	[col#{$size}~="baseline"] 		{ align-self: baseline; }
	[flex#{$size}~="vert"]				{
		[col#{$size}~="left"]				{ align-self: flex-start; }
		[col#{$size}~="center"]			{ align-self: center; }
		[col#{$size}~="right"]			{ align-self: flex-end; }
	}

	// sizes
	[col#{$size}="0"] { display: none; }

	$i: $cols;
	@while $i > 0 {
		// percentage($i / $cols) - for reference

		$width: ($baseWidth * $i) + ($gutter * ($i - 1));

		// column
		[col#{$size}~="#{$i}"] {
			display: block; // override col=0
			flex-basis: $width;

			// natural feeling columns
			[flex~="vert"] &,
			[flex~="vertrev"] & { width: $width; }

			[flex#{$size}~="fill"] &,
			&[col#{$size}~="fill"] {
				flex-basis: percentage($i / $cols);
			}
			&[col#{$size}~="flush"] {
				margin-left: 0;
				margin-right: 0;
			}
		}

		$i: $i - 1;
	}
}

