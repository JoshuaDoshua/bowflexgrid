// TODO , rework how gutters work to be more elegant

@import "utility";

////
/// @group BowFlexGrid
////

[bow],
[flex],
[col] { box-sizing: border-box; }

/// @content Create the grid rules
/// @param {array} $bps - Array of breakpoints with key values
/// @param {int} $columns [12] - number of columns in your grid
/// @param {int} $gutter [20px] - space between each column (use 0 for flush)
/// @param {str} $main [1140px] - the main content wrapper breakpoint
/// @param {str} $outer [1600px] - the outer content wrapper breakpoint
@mixin bowflex-grid($bps, $cols: 12, $gutter: 20px, $mobilePadding: 5%, $main: lrg, $outer: xlg) {

	// calculate percentage based on
	// # of cols and main container
	$fullWidth: strip-unit(bp($main));
	$colWidth: $cols / $fullWidth;
	$colPerc: percentage($colWidth);

	[bow],
	[flex] {
	  width: 100%;
		margin-left: auto;
		margin-right: auto;
	}

	[bow] {
		display: block;
	  max-width: #{bp($outer)};
	}

	[flex] {
		display: flex;
		max-width: #{bp($main)};

		flex: 0 1 auto;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: space-between;
		align-items: flex-start;

		padding-left: #{$mobilePadding};
		padding-right: #{$mobilePadding};
		@include respond($main) {
			padding-left: 0;
			padding-right: 0;
		}
	}

	[bow~="fluid"],
	[flex~="fluid"] { max-width: 100%; }

	// null - default, mobile first
	@include flex-grid-size('', $cols, $colPerc, $gutter);

	// create a set of rules for each breakpoint
	// include a dash to prefix the flex"-key" & col-"key"
	@each $key, $size in $bps {
		@include respond($key) {
			@include flex-grid-size("-#{$key}", $cols, $colPerc, $gutter);
		}
	}
}

// create a set of row rules for a given size
// @private
@mixin flex-grid-size($size, $cols, $colPerc, $gutter) {

	// just a container, without flex rules
	[flex#{$size}~="container"]		{ display: block; }

	// direction
	[flex#{$size}~="row"]					{ flex-direction: row; }
	[flex#{$size}~="rowrev"]			{ flex-direction: row-reverse; }
	[flex#{$size}~="vert"]				{ flex-direction: column; }
	[flex#{$size}~="vertrev"]			{ flex-direction: column-reverse; }
	// wrap
	[flex#{$size}~="wrap"]				{ flex-wrap: wrap; }
	[flex#{$size}~="nowrap"]			{ flex-wrap: nowrap; }
	[flex#{$size}~="wraprev"] 		{ flex-wrap: wrap-reverse; }
	// horizontal alignment
	[flex#{$size}~="left"]				{ justify-content: flex-start; }
	[flex#{$size}~="center"] 			{ justify-content: center; }
	[flex#{$size}~="right"] 			{ justify-content: flex-end; }
	[flex#{$size}~="between"] 		{ justify-content: space-between; }
	[flex#{$size}~="around"] 			{ justify-content: space-around; }

	// TODO MOVE TO COLUMN DECLARATION
	// horizontal alignment gutters
	[flex#{$size}~="left"] [col],
	[flex#{$size}~="center"] [col] {
		margin-left: $gutter;
		&:first-child { margin-left: 0; }
	}
	[flex#{$size}~="right"] [col] {
		margin-right: $gutter;
		&:last-child { margin-left: 0; }
	}

	// TODO
	// [flex#{$size}~="fill"] [col] { margin-left: 0; margin-right: 0; }
	// [flex#{$size}~="rowrev"] [col] {
	// 	&:first-of-type { margin-left: $gutter; }
	// 	&:last-of-type { margin-left: 0; }
	// }
	// [flex#{$size}~="vertical"] [col] { margin-left: 0; margin-right: 0; }

	// [data-flex#{$size}~="flush"] [data-col] { margin-right: 0; }

	// vertical alignment
	[flex#{$size}~="top"] 				{ align-items: flex-start; }
	[flex#{$size}~="middle"] 			{ align-items: center; }
	[flex#{$size}~="bottom"] 			{ align-items: flex-end; }
	[flex#{$size}~="stretch"] 		{ align-items: stretch; }
	[flex#{$size}~="baseline"] 		{ align-items: baseline; }

	// @TODO: Does not include the "align-content" rules

	// columns
	// alignments
	[col#{$size}~="top"]					{ align-self: flex-start; }
	[col#{$size}~="middle"] 			{ align-self: center; }
	[col#{$size}~="bottom"] 			{ align-self: flex-end; }
	[col#{$size}~="stretch"] 			{ align-self: stretch; }
	[col#{$size}~="baseline"] 		{ align-self: baseline; }

	// sizes
	[col#{$size}="0"] { display: none; }
	$i: $cols;
	@while $i > 0 {
		// column
		[col#{$size}~="#{$i}"] {
			// override any size="0"
			display: block;

			// calculate width
			@if ($i < $cols) {
				flex-basis: calc(#{percentage($i / $cols)} - #{$gutter});
			} @else {
				flex-basis: 100%;
			}

			// dont do gutter if fluid
			// use on first column in row
			&[col~="fluid"] { flex-basis: #{percentage($i / $cols)}; }

			// natural vertical spacing
			[flex#{$size}~="vert"] &,
			[flex#{$size}~="vertrev"] & {
				width: #{percentage($i / $cols)};
			}

		}

		$i: $i - 1;
	}
}

