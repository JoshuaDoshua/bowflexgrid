/// Retrieve a breakpoint from the $bps array
/// @group utility
/// @param {str} $key - Array key
/// @example
///	 bp(lrg)
@function bp($key) {
	@if map-has-key($bps, $key) {
		@return map-get($bps, $key)
	}

	@return $key;
}

/**

respond($from,$to,$type,$other)
respondTo($to,$type,$other)
respondFrom($from,$type,$other)

@mixin respondFrom($from

*/

/// @content CSS rules inside the media query
/// @group utility
/// @param {str} $bp - Size value of media query
/// @param {str} $direction [min] - min or max query
/// @example
///  respond(med) { @content }
///  respond(map-get($bps, med)) { @content }
///  respond($someSize, min) { @content }
///  respond(1140px, max) { @content }
@mixin respond($bp, $direction: min) {
	@media screen and
		($direction+-width: #{bp($bp)})
	{ @content; }
}

/// @content CSS Rules inside the media query
/// @group utility
/// @param {str} $min [med] - the minimum value
/// @param {str} $max [lrg] - the maximum value
/// @example
///  respondBetween(med, lrg) { @content }
///  respondBetween(map-get($bps, med), map-get($bps, lrg)) { @content }
///  respondBetween($someSize, $anotherSize) { @content }
///  respondBetween(300px, 768px) { @content }
@mixin respondBetween($min: med, $max: lrg) {
	@media screen
		and (min-width: #{bp($min)})
		and (max-width: #{bp($max)}) 
	{ @content; }
}
